/*
 * This file was automatically generated by EvoSuite
 * Sun Aug 23 21:46:46 GMT 2020
 */

package com.br.rfs.desafio.itau.controller;

import org.junit.Test;
import static org.junit.Assert.*;
import com.br.rfs.desafio.itau.business.DesafioBO;
import com.br.rfs.desafio.itau.controller.DesafioController;
import com.br.rfs.desafio.itau.domain.TransactionRequest;
import com.br.rfs.desafio.itau.service.DesafioService;
import org.evosuite.runtime.javaee.injection.Injector;
import org.springframework.http.ResponseEntity;

public class DesafioController_ESTest {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      DesafioController desafioController0 = new DesafioController();
      // Undeclared exception!
      try { 
        desafioController0.deleteTransaction();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      DesafioController desafioController0 = new DesafioController();
      DesafioBO desafioBO0 = new DesafioBO();
      DesafioService desafioService0 = new DesafioService();
      Injector.inject(desafioBO0, (Class<?>) DesafioBO.class, "service", (Object) desafioService0);
      Injector.validateBean(desafioBO0, (Class<?>) DesafioBO.class);
      Injector.inject(desafioController0, (Class<?>) DesafioController.class, "desafioBO", (Object) desafioBO0);
      Injector.validateBean(desafioController0, (Class<?>) DesafioController.class);
      ResponseEntity<Object> responseEntity0 = desafioController0.getStatistics();
      assertEquals(200, responseEntity0.getStatusCodeValue());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      DesafioController desafioController0 = new DesafioController();
      DesafioBO desafioBO0 = new DesafioBO();
      DesafioService desafioService0 = new DesafioService();
      Injector.inject(desafioBO0, (Class<?>) DesafioBO.class, "service", (Object) desafioService0);
      Injector.validateBean(desafioBO0, (Class<?>) DesafioBO.class);
      Injector.inject(desafioController0, (Class<?>) DesafioController.class, "desafioBO", (Object) desafioBO0);
      Injector.validateBean(desafioController0, (Class<?>) DesafioController.class);
      TransactionRequest transactionRequest0 = new TransactionRequest();
      ResponseEntity<Object> responseEntity0 = desafioController0.postTransaction(transactionRequest0);
      assertEquals(422, responseEntity0.getStatusCodeValue());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      DesafioController desafioController0 = new DesafioController();
      // Undeclared exception!
      try { 
        desafioController0.getStatistics();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      DesafioController desafioController0 = new DesafioController();
      DesafioBO desafioBO0 = new DesafioBO();
      DesafioService desafioService0 = new DesafioService();
      Injector.inject(desafioBO0, (Class<?>) DesafioBO.class, "service", (Object) desafioService0);
      Injector.validateBean(desafioBO0, (Class<?>) DesafioBO.class);
      Injector.inject(desafioController0, (Class<?>) DesafioController.class, "desafioBO", (Object) desafioBO0);
      Injector.validateBean(desafioController0, (Class<?>) DesafioController.class);
      // Undeclared exception!
      try { 
        desafioController0.postTransaction((TransactionRequest) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // HttpStatus must not be null
         //
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      DesafioController desafioController0 = new DesafioController();
      DesafioBO desafioBO0 = new DesafioBO();
      DesafioService desafioService0 = new DesafioService();
      Injector.inject(desafioBO0, (Class<?>) DesafioBO.class, "service", (Object) desafioService0);
      Injector.validateBean(desafioBO0, (Class<?>) DesafioBO.class);
      TransactionRequest transactionRequest0 = new TransactionRequest();
      // Undeclared exception!
      try { 
        desafioController0.postTransaction(transactionRequest0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      DesafioController desafioController0 = new DesafioController();
      DesafioBO desafioBO0 = new DesafioBO();
      DesafioService desafioService0 = new DesafioService();
      Injector.inject(desafioBO0, (Class<?>) DesafioBO.class, "service", (Object) desafioService0);
      Injector.validateBean(desafioBO0, (Class<?>) DesafioBO.class);
      Injector.inject(desafioController0, (Class<?>) DesafioController.class, "desafioBO", (Object) desafioBO0);
      Injector.validateBean(desafioController0, (Class<?>) DesafioController.class);
      ResponseEntity<Object> responseEntity0 = desafioController0.deleteTransaction();
      assertFalse(responseEntity0.hasBody());
  }
}
