/*
 * This file was automatically generated by EvoSuite
 * Sun Aug 23 21:45:23 GMT 2020
 */

package com.br.rfs.desafio.itau.business;

import org.junit.Test;
import static org.junit.Assert.*;
import com.br.rfs.desafio.itau.business.DesafioBO;
import com.br.rfs.desafio.itau.domain.DesafioResponse;
import com.br.rfs.desafio.itau.domain.TransactionRequest;
import com.br.rfs.desafio.itau.handler.PostTransaction;
import com.br.rfs.desafio.itau.handler.StatisticsTransaction;
import com.br.rfs.desafio.itau.interfaces.Operations;
import com.br.rfs.desafio.itau.service.DesafioService;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Stack;
import org.evosuite.runtime.javaee.injection.Injector;
import org.springframework.http.HttpStatus;

public class DesafioBO_ESTest {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      DesafioBO desafioBO0 = new DesafioBO();
      DesafioService desafioService0 = new DesafioService();
      Injector.inject(desafioBO0, (Class<?>) DesafioBO.class, "service", (Object) desafioService0);
      Injector.validateBean(desafioBO0, (Class<?>) DesafioBO.class);
      PostTransaction postTransaction0 = new PostTransaction();
      TransactionRequest transactionRequest0 = new TransactionRequest();
      LinkedList<TransactionRequest> linkedList0 = new LinkedList<TransactionRequest>();
      // Undeclared exception!
      try { 
        desafioBO0.process(postTransaction0, transactionRequest0, (DesafioResponse<Object>) null, linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      DesafioBO desafioBO0 = new DesafioBO();
      DesafioService desafioService0 = new DesafioService();
      Injector.inject(desafioBO0, (Class<?>) DesafioBO.class, "service", (Object) desafioService0);
      Injector.validateBean(desafioBO0, (Class<?>) DesafioBO.class);
      StatisticsTransaction statisticsTransaction0 = new StatisticsTransaction();
      DesafioResponse<Object> desafioResponse0 = new DesafioResponse<Object>();
      TransactionRequest transactionRequest0 = new TransactionRequest();
      List<TransactionRequest> list0 = desafioBO0.process(statisticsTransaction0, transactionRequest0, desafioResponse0, (List<TransactionRequest>) null);
      assertNotNull(list0);
      assertEquals(HttpStatus.OK, desafioResponse0.getStatusCode());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      DesafioBO desafioBO0 = new DesafioBO();
      DesafioService desafioService0 = new DesafioService();
      Injector.inject(desafioBO0, (Class<?>) DesafioBO.class, "service", (Object) desafioService0);
      Injector.validateBean(desafioBO0, (Class<?>) DesafioBO.class);
      PostTransaction postTransaction0 = new PostTransaction();
      DesafioResponse<Object> desafioResponse0 = new DesafioResponse<Object>();
      Stack<TransactionRequest> stack0 = new Stack<TransactionRequest>();
      TransactionRequest transactionRequest0 = new TransactionRequest();
      stack0.addElement(transactionRequest0);
      List<TransactionRequest> list0 = desafioBO0.process(postTransaction0, postTransaction0, desafioResponse0, stack0);
      assertTrue(list0.contains(transactionRequest0));
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      DesafioBO desafioBO0 = new DesafioBO();
      DesafioService desafioService0 = new DesafioService();
      Injector.inject(desafioBO0, (Class<?>) DesafioBO.class, "service", (Object) desafioService0);
      Injector.validateBean(desafioBO0, (Class<?>) DesafioBO.class);
      TransactionRequest transactionRequest0 = new TransactionRequest();
      DesafioResponse<Object> desafioResponse0 = new DesafioResponse<Object>();
      ArrayList<TransactionRequest> arrayList0 = new ArrayList<TransactionRequest>();
      desafioBO0.process((Operations) null, transactionRequest0, desafioResponse0, arrayList0);
      assertEquals("Error:null", desafioResponse0.getMessage());
  }
}
